Class Name: ObjectPool
This class implements the Object Pool Design Pattern. It manages a fixed set of reusable resources instead of creating and destroying objects repeatedly. This pattern is particularly useful when object creation is expensive.

Class Members and Fields
List<Resource> resourcePool;
This list holds the available Resource objects which are ready to be used.

These are reusable resources that are not currently in use.

List<Resource> inUse;
This list holds the Resource objects that are currently being used by clients.

When a client acquires a resource, it is moved from resourcePool to inUse.

int initialSize = 5;
The number of Resource objects that will be created initially when the pool is instantiated.

int maxSize = 10;
The maximum number of Resource objects that can be managed by the pool (both in use and available).

Ensures that no more than maxSize resources are created.

private static ObjectPool instance;
A singleton instance of the ObjectPool class.

Ensures that only one object pool exists throughout the application.

Constructor: private ObjectPool()
The constructor is marked private to restrict external instantiation and enforce the singleton pattern.

Initializes resourcePool and inUse lists.

Creates initialSize number of Resource objects and adds them to resourcePool.

Logs: "Object Created" (for initial resources).

Method: public static ObjectPool getInstance()
Implements the double-checked locking pattern to ensure thread-safe lazy initialization of the singleton instance.

If the instance is null, synchronizes on the class and creates a new instance.

Returns the existing or newly created ObjectPool instance.

Method: public void releaseResource(Resource r)
Purpose: To release a resource back to the pool after usage.

Removes the resource r from the inUse list and adds it back to resourcePool.

Logs: "Object Released".

Method: public Resource aquireResource()
Purpose: To provide a resource to a client.

Logic:
If resourcePool is not empty:

Retrieves the first resource from resourcePool.

Adds it to inUse.

Logs: "Object Got From Resource Pool".

Returns the resource.

If total resources (resourcePool + inUse) are less than maxSize:

Creates a new Resource object.

Adds it to inUse.

Logs: "Object Created Individually".

Returns the resource.

Else:

Pool has reached the maximum limit.

No resources are available, so it returns null